// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
FactionTroop is Human

constants:

   include blakston.khd

   EQUIPMENT_DROP_PERCENT = 20

resources:

   include troop.lkod

   FactionTroop_name_rsc = "faction troop"
   FactionTroop_desc_rsc = \
   "This is a member of the local militia."
   FactionTroop_dead_name_rsc = "dead faction troop"
   
   FactionTroop_defend_ally_rsc = "%s%s comes to your aid!"

classvars:

   vrName = FactionTroop_name_rsc
   vrDesc = FactionTroop_desc_rsc
   vrDead_name = FactionTroop_dead_name_rsc
   
   vrDefend = FactionTroop_defend_ally_rsc

   viTreasure_type = TID_EMPTY

   viSpeed = SPEED_FASTER
   viAttack_type = ATCK_WEAP_SLASH
   viAttributes = 0
   viDefault_behavior = AI_FIGHT_NEWBIESAFE | AI_MOVE_REGROUP

   viColorTranslate1 = XLAT_TO_RED     // Shirt
   viColorTranslate2 = XLAT_TO_BLACK   // Pants

   vcShieldClass = &GuildShield
   viShieldColor1 = XLAT_TO_RED
   viShieldColor2 = XLAT_TO_RED
   viShieldShape = SHIELDSHAPE_SLASH
   viInsignia = $

   viVisionDistance = 12

   viCashMin = 200
   viCashMax = 600
   
   //chance to attack the enemy soldier or defend an ally soldier
   viAttackDefenseValue = 50

properties:

   piBaseLevel = 80
   piBaseDifficulty = 6

   //Here so they can be set
   vrIcon = human_male_icon_rsc
   vrDead_Icon = human_dead_male_icona_rsc
   vrDead_Legs = human_dead_male_iconb_rsc
   viLevel = 80         // piBaseLevel
   viDifficulty = 4     // piBaseDifficulty
   piGender = GENDER_MALE
   viKarma = 0
   
   plAllies = $
   pbAssessTakeoverAttempts = TRUE

messages:
   
   Constructed()
   {
      if pbAssessTakeoverAttempts
      {
         Post(self,@AssessTakeoverAttempt);
      }
      propagate;
   }
   
   AssessTakeoverAttempt()
   {
      local i, oRoom, oFlag, oEnemyClaimer, oAllyInNeed,
            bFlagUnderAttack, each_obj;
         
      //oRoom - where the troop spawned
      oRoom = Send(self,@GetOwner);
      
      if (oRoom <> $)
      {
         //Look for a flagpole in room object oRoom
         //Then assess if the flagpole is under attack take action
         foreach i in Send(oRoom,@GetHolderActive)
         {
            //Look for a flagpole in the room
            each_obj = Send(oRoom,@HolderExtractObject,#data=i);
            if IsClass(each_obj,&Flagpole)
            {
               oFlag = each_obj;
            }
            else if GetClass(each_obj) = &Player
            {
               //Check if they are an ally soldier
               if Send(each_obj,@IsAlly,#regroup=TRUE)
               {
                  //Only care about soldiers - Gotta be "intriguing"
                  if Send(each_obj,@FindUsing,#class=&SoldierShield) <> $
                  {
                     plAllies = Cons(each_obj, plAllies);
                  }
               }
            }
         }
         // Debug("plAllies = ",plAllies);
      }
      else
      {
         Debug("FactionTroop called AssessTakeoverAttempt with no owner");
      }
      
      if oFlag <> $
      {
         //Check if the flag is under attack
         oEnemyClaimer = Send(oFlag,@GetClaimer);
         if oEnemyClaimer <> $
         {
            bFlagUnderAttack = TRUE;
            // Debug("A soldier spawned to a flag under attack");
         }
         // Debug("oEnemyClaimer = ",oEnemyClaimer);
      }
      
      if bFlagUnderAttack = TRUE
      {
         //Determine if we should defend the flag, or assist allies in need
         if Random(0,100) < (100 - viAttackDefenseValue)
         {
            //target enemy flag barer
            //Possibly set iHatred based on remaining Flagpole.ptClaimAttempt ?
            Send(self,@TargetSwitch,#what=oEnemyClaimer,#iHatred=30);
            Send(self,@EnterStateChase,#target=oEnemyClaimer,#actnow=TRUE);
            // Debug("Switching target to oEnemyClaimer");
         }
         else if plAllies <> $
         {
            //search for low health ally
            Debug("Looking for ally to defend");
            oAllyInNeed = First(plAllies);
            foreach i in plAllies
            {
               if Send(i,@GetHealth) < Send(oAllyInNeed,@GetHealth) AND i <> oAllyInNeed
               {
                  oAllyInNeed = i;
               }
            }
         }
      }
      
      if oAllyInNeed <> $
      {
         //Become a minion of that ally until they leave the room (includes logging off), or the ClaimAttempt ends
         Debug("FactionTroop decided to try and defend",oAllyInNeed);
         //We'll make this troop a minion of the oAllyInNeed.
         //Make sure to de-minionize if the Ally flees, dies, logs, or the takeover ends
         //We shouldn't need to worry about Seduce, because they will lose faction status by casting that on us
         Send(oAllyInNeed,@MsgSendUser,#message_rsc=vrDefend,
               #parm1=Send(self,@GetCapDef),#parm2=Send(self,@GetName));
         
         if Send(self,@GetMaster) = $
         {
            Send(oAllyInNeed,@SetMaster,#oMaster=self);
         }
      }
      
      return;
   }

   SetClothes()
   {
      Send(self,@SetDefaultClothes,#shirt_color=viColorTranslate1);
      Send(self,@SetTroopLegs,#translation=viColorTranslate2);

      return;
   }

   SetEquipment(dmWeaponOverride=$,dmArmorOverride=$,
                dmGauntsOverride=$,dmHelmOverride=$)
   {
      local oEquipmentItem, iRandomNumber, iBonusModifier;

      if dmWeaponOverride = $
      {
         iRandomNumber = Random(1,100);
         if iRandomNumber <= 35
         {
            oEquipmentItem = Create(&Longsword);
            iBonusModifier = 3;
         }
         else if iRandomNumber <= 55
         {
            oEquipmentItem = Create(&Axe);
            iBonusModifier = 2;
         }
         else if iRandomNumber <= 65
         {
            oEquipmentItem = Create(&Hammer);
            iBonusModifier = 2;
         }
         else if iRandomNumber <= 75
         {
            oEquipmentItem = Create(&Mace);
            iBonusModifier = 1;
         }
         else if iRandomNumber <= 80
         {
            oEquipmentItem = Create(&ShortSword);
            iBonusModifier = 1;
         }
         else if iRandomNumber <= 85
         {
            oEquipmentItem = Create(&Scimitar);
            iBonusModifier = 4;
         }
         else if iRandomNumber <= 90
         {
           oEquipmentItem = Create(&BattleBow);
           poArrow = Create(&NeruditeArrow);
           iBonusModifier = 5;
         }
         else
         {
            oEquipmentItem = Create(&LongBow);
            poArrow = Create(&NeruditeArrow);
            iBonusModifier = 4;
         }
         
         viDifficulty = piBaseDifficulty + iBonusModifier;
      }
      else
      {
         // Override weapon for custom troop creation
         oEquipmentItem = Create(dmWeaponOverride);
      }

      Send(self,@AddEquipmentObject,#what=oEquipmentItem);

      if dmArmorOverride = $
      {
         iRandomNumber = Random(1,100);
         if iRandomNumber <= 35
         {
            oEquipmentItem = Create(&LeatherArmor);
            iBonusModifier = 20;
         }
         else if iRandomNumber <= 70
         {
            oEquipmentItem = Create(&ChainArmor);
            iBonusModifier = 50;
         }
         else if iRandomNumber <= 85
         {
            oEquipmentItem = Create(&ScaleArmor);
            iBonusModifier = 75;
         }
         else
         {
            oEquipmentItem = Create(&PlateArmor);
            iBonusModifier = 100;
         }

         viLevel = piBaseLevel + iBonusModifier;
      }
      else
      {
         // Override armor for custom troop creation
         oEquipmentItem = Create(dmArmorOverride);
      }

      Send(self,@AddEquipmentObject,#what=oEquipmentItem);

      // Gauntlets?
      if dmGauntsOverride = $
      {
         iRandomNumber = Random(1,100);
         if iRandomNumber < 20
         {
            oEquipmentItem = Create(&Gauntlet);
            viDifficulty = viDifficulty + 1;
            viLevel = viLevel + 20;
            Send(self,@AddEquipmentObject,#what=oEquipmentItem);
         }
      }
      else
      {
         oEquipmentItem = Create(dmGauntsOverride);
         Send(self,@AddEquipmentObject,#what=oEquipmentItem);
      }
         
      // Helmet?
      if dmHelmOverride = $
      {
         if Random(1,100) < 30
         {
            oEquipmentItem = Create(&SimpleHelm);
            Send(self,@AddEquipmentObject,#what=oEquipmentItem);
         }
      }
      else
      {
         oEquipmentItem = Create(dmHelmOverride);
         Send(self,@AddEquipmentObject,#what=oEquipmentItem);
      }

      return;
   }

   SetShield()
   {
      local oEquipmentItem;

      oEquipmentItem = Create(vcShieldClass,#color1=viShieldColor1,#color2=viShieldColor2,
                              #shape=viShieldShape);
      if viInsignia <> $
      {
         Send(oEquipmentItem,@ChangeGuildInsignia,#insignia=viInsignia);
      }

      Send(self,@AddEquipmentObject,#what=oEquipmentItem);

      return;
   }

   // Override from monster superclass
   // We drop some of our carried items when we die.
   CreateTreasure(who = $, corpse = $)
   {
      local oUsedItem, oItemAtt;

      oItemAtt = Send(SYS,@FindItemAttByNum,#num=IA_CORPSEPOINTER);

      foreach oUsedItem in plUsing
      {
         // Only a percentage chance to drop each item.  Too much stuff otherwise.
         // Don't drop the shield!  It's a quest/special item!
         if (Random(1,100) <= EQUIPMENT_DROP_PERCENT)
            AND (NOT IsClass(oUsedItem,vcShieldClass))
            AND NOT pbIllusion
         {
            if (oItemAtt <> $) AND Send(oItemAtt,@ReqAddToItem,#oItem=oUsedItem)
            {
               Send(oItemAtt,@AddToItem,#oItem=oUsedItem,#state1=corpse);
            }

            Send(poOwner,@NewHold,#what=oUsedItem,
                  #new_row=piRow,#new_col=piCol,
                  #fine_row=piFine_row,#fine_col=piFine_col);
         }
         else
         {
            Send(oUsedItem,@Delete);
         }
      }

      plUsing = $;

      propagate;
   }

   IsAlly(target = $, regroup = FALSE)
   {
      local iFaction;

      if IsClass(target,GetClass(self))
      {
         return TRUE;
      }

      if IsClass(target,&Player)
      {
         iFaction = Send(target,@GetFaction);
         if (NOT regroup) AND (iFaction = FACTION_NEUTRAL)
         {
            return TRUE;
         }

         if iFaction = viFaction
         {
            return TRUE;
         }
         else
         {
            return FALSE;
         }
      }

      propagate;
   }

   SpecialHatredBehavior(what=$)
   {
      local iFaction;

      if (IsClass(what,&User)
         AND (Send(SETTINGS_OBJECT,@TroopsAttackNonShielded)
            OR Send(what,@FindUsing,#class=&SoldierShield) <> $))
         OR IsClass(what,&FactionTroop)
      {
         iFaction = Send(what,@GetFaction);
         if iFaction = viFaction
         {
            return -30;
         }

         if (iFaction <> FACTION_NEUTRAL)
            AND (iFaction <> viFaction)
         {
            return 30;
         }
      }

      return 0;
   }

end
////////////////////////////////////////////////////////////////////////////////
